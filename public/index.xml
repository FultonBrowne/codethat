<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Top Quality Developer Tutorials CodeThat.today</title><link>https://theodesp.github.io/codethat/</link><description>Recent content on Top Quality Developer Tutorials CodeThat.today</description><language>en-us</language><lastBuildDate>Tue, 12 Dec 2017 14:15:59 -0600</lastBuildDate><atom:link href="https://theodesp.github.io/codethat/index.xml" rel="self" type="application/rss+xml"/><item><title>Series-2</title><link>https://theodesp.github.io/codethat/tutorial/awesome-programming/series-2/</link><pubDate>Sun, 30 Jul 2017 14:15:59 -0600</pubDate><guid>https://theodesp.github.io/codethat/tutorial/awesome-programming/series-2/</guid><description/></item><item><title>Series-1</title><link>https://theodesp.github.io/codethat/tutorial/awesome-programming/series-1/</link><pubDate>Fri, 30 Jun 2017 14:15:59 -0600</pubDate><guid>https://theodesp.github.io/codethat/tutorial/awesome-programming/series-1/</guid><description/></item><item><title>Let&#39;s Implement a Bloom Filter in Go</title><link>https://theodesp.github.io/codethat/tutorial/lets-implement-a-bloom-filter-in-go/</link><pubDate>Tue, 12 Dec 2017 14:15:59 -0600</pubDate><guid>https://theodesp.github.io/codethat/tutorial/lets-implement-a-bloom-filter-in-go/</guid><description>&lt;p&gt;Today I decided to play with some data structures and I was wondering what should I learn next.
I remember some time ago while I was reading some articles
about &lt;a href=&#34;https://www.google.ie/search?ei=X_U0WsGpIuzfgAaBsqPoCQ&amp;amp;q=cassandra+bloom+filter&amp;amp;oq=Cassandra+blool&amp;amp;gs_l=psy-ab.1.0.0i13k1l10.5647.6751.0.8083.8.7.1.0.0.0.80.468.7.7.0....0...1c.1.64.psy-ab..0.8.478...0j0i67k1j0i20i263k1.0.w0BJKKaKl0A&#34;&gt;Cassandra internals&lt;/a&gt; that it used bloom filters to check if the particular SSTables are likely to have the request partition data. I thought it might be cool to implement one and share my thought process with you. I will try to explain things as simple as possible.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;enter-the-bloom&#34;&gt;Enter the Bloom&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#enter-the-bloom&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;So what is a Bloom Filter? A detailed explanation is beyond the scope of this article but here’s a summary
from Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bloom Filter: A space-efficient probabilistic data structure that is used to test whether an element is a member of a set. False positive matches are possible, but false negatives are not; i.e. a query returns either “possibly in set” or “definitely not in set”. Elements can be added to the set, but not removed.
Bloom filters are used in many cases like Cache filtering to prevent “one-hit-wonders” from being stored in its disk caches or in blogs to avoid recommending articles a user has previously read like Medium does.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So let’s try to implement one to see what we can learn.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;enter-the-code&#34;&gt;Enter the Code&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#enter-the-code&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We need a few thing before we can start. As bloom filters are only expanding and we cannot remove items
from them reliably, let’s define the simplest abstract interface we need to provide.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;go&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Interface&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Adds the item into the Set
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Check if items is maybe in the Set
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Based on that let’s define and add the initial constructor, as we need to create one filter before we can use it:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;go&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// BloomFilter probabilistic data structure definition
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BloomFilter&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bitset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// The bloom-filter bitset
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Number of hash values
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Number of elements in the filter
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Size of the bloom filter bitset
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hashFuncs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hash64&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// The hash functions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Returns a new BloomFilter object,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BloomFilter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BloomFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bitset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// we have 3 hash functions for now
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hashfns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hash64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;murmur3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New64a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’ve used 3 different hash functions here which will produce 3 different values for simplicity on each item.
I’ve used a boolean slice to store the flags.&lt;/p&gt;
&lt;p&gt;Now let’s try to implement the interface definitions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding Items to the Set&lt;/strong&gt;: When Adding an item we simply pass it through the hash functions and store the results in an array. Those numbers are the positions that we need to set in the boolean array to mark them as occupied. As the hash positions might be big numbers we mod the positions with the size of the bit-set to prevent index errors.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;go&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Adds the item into the bloom filter set by hashing in over the . // hash functions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BloomFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hashes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hashValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bitset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Calculates all the hash values by applying in the item over the // hash functions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BloomFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hashValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hashFunc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hashfns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hashFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hashFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sum64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hashFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see we only generate the values and set their values as positions into the bit-set.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Checking if an item is possibly in the Set&lt;/strong&gt;: To check if the item is possibly in the set we do the same thing as the Add method but now we check if the hash position is flagged as true in the bit-set. If all positions are been set then we say the item possibly exists. If one of the positions has not been set then we say it definitely does not exist.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;go&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Test if the item into the bloom filter is set by hashing in over // the hash functions
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BloomFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hashes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hashValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bitset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;lets-write-some-tests&#34;&gt;Let&amp;rsquo;s write some tests&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#lets-write-some-tests&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We check some values if they exist in the set or not.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;go&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Test items if items may exist into the set
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MySuite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestIfMayExist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;madam&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Testing for existence may give you false Positive when the item is on the set but in reality, it&amp;rsquo;s not.
That depends on many factors like the size of the bit-set the size of the elements in the set and the quality
of the hash functions.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;conclusion&#34;&gt;Conclusion&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#conclusion&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;As you can see, implementing bloom filters are not a difficult thing.
You only need to divide the problem into small pieces and work on them one by one. In that case,
we started with the abstract representation of the Data Structure and implemented the methods using simple
conventions. I hope you’ve enjoyed the endeavor and you learned something.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;exercises&#34;&gt;Exercises&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#exercises&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Bloom filter has some mathematical properties for calculating the optimal number of elements such
as the error rate is within a specific percentage.
For example from &lt;a href=&#34;https://brilliant.org/wiki/bloom-filter/#false-positives-analysis&#34;&gt;https://brilliant.org/wiki/bloom-filter/#false-positives-analysis&lt;/a&gt; the best value for k is:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;k = ln(2) * m / n&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Modify the original constructor of the BloomFilter such as it accepts a parameter &lt;code&gt;e&lt;/code&gt; that will try to
calculate the optimal &lt;code&gt;k&lt;/code&gt; such as the invariant holds.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#references&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;You can find more information about bloom filters in the following sites:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bloom_filter&#34;&gt;&lt;strong&gt;Wiki Article&lt;/strong&gt;&lt;/a&gt;: A nice overview of the bloom filter
&lt;a href=&#34;http://dmod.eu/deca/ft_gateway.cfm.pdf&#34;&gt;&lt;strong&gt;Original Paper&lt;/strong&gt;&lt;/a&gt;: The original paper describing Bloom filters
&lt;a href=&#34;https://brilliant.org/wiki/bloom-filter/#_=_&#34;&gt;&lt;strong&gt;Briliant.org article&lt;/strong&gt;&lt;/a&gt;: A nice explanation from Briliant.org&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;</description></item><item><title>How Machine Learning and AI could eventually replace development work</title><link>https://theodesp.github.io/codethat/article/how-machine-learning-and-ai-could-eventually-replace-development-work/</link><pubDate>Mon, 11 Sep 2017 14:15:59 -0600</pubDate><guid>https://theodesp.github.io/codethat/article/how-machine-learning-and-ai-could-eventually-replace-development-work/</guid><description>&lt;p&gt;Recently I’ve been seeing more articles regarding the status of Artificial Intelligence and Machine Learning. Some doomsday prophecies like &lt;a href=&#34;https://www.wired.com/2016/05/the-end-of-code/&#34;&gt;the end of code&lt;/a&gt; others say that it will make &lt;a href=&#34;http://uk.businessinsider.com/google-on-machine-learning-2015-10?r=US&amp;amp;IR=T&#34;&gt;humans dependant on AI assistants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While I agree with most of the opinions expressed about those topics, I feel that the future will not be just a total dependence or replacement of the human factor in those areas.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It will be a transformation phase for sure that will span over the years to come.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There will be more and more practical applications of AI and ML that will help replace the dangerous and reckless human factor, for example, &lt;a href=&#34;https://www.wired.com/2015/05/oh-look-evidence-humans-shouldnt-driving/&#34;&gt;driving vehicles&lt;/a&gt; or &lt;a href=&#34;http://nypost.com/2016/10/18/pilots-could-soon-lose-their-jobs-to-robots/&#34;&gt;aircrafts&lt;/a&gt;. For sure humans will only be observers, only having their minds clear to check if anything will go wrong so they can jump in and correct.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a natural transition as we humans are crafters&lt;/strong&gt;. We are used to creating tools to help us perform jobs bigger than ourselves. We started in the ancient times with axes, picks, iron forging, machines, automation tools to make us stronger. Now we are just trying to create something smarter (in theory) from us. It’s unavoidable.&lt;/p&gt;
&lt;p&gt;Those tools though however sophisticated though have some limitations and those limitations are expressed in terms of our own limitations of thinking.&lt;/p&gt;
&lt;p&gt;Unless for example, we prove that we can construct a program that is free of all bugs then our tools can only go so far. &lt;a href=&#34;http://wiki.c2.com/?ProofsCantProveTheAbsenceOfBugs&#34;&gt;See relevant link&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is fundamental. If we can construct such a proof then we can train machines to create 100% bug free programs thus making SW Engineers redundant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can you prove that with 100% confidence? It turns out that it&amp;rsquo;s impossible within the time limits.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, it’s certainly possible to prove the absence many common classes of bugs. Or the code does look sound and has good design characteristics. It doesn’t do anything that will compromise rules within a restricted set of variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So with that fact, we can be almost sure that our programs do work as intended maybe 99.99% correct which means that we will still need a human factor to account for the last 0.01%, just make sure that there is no apparent risk.&lt;/p&gt;
&lt;p&gt;Thus for the current situation, we might brainstorm the various possible transformations that ML and AI could do to replace certain development work in the near future.&lt;/p&gt;
&lt;p&gt;In the rest of the article I will propose some potential transformations.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;transformation-1-automating-code-reviews-and-code-checking&#34;&gt;Transformation 1: Automating Code reviews and Code Checking&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#transformation-1-automating-code-reviews-and-code-checking&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/tran-1.jpg&#34; alt=&#34;goku&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ML and AI assistants will perform automated code reviews the moment we push code to repositories. They will comment out unusual code blocks and perform vulnerability and static code analysis. They will correct those issues and do a PR again for review.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those bot assistants will become more intelligent and they will perform automated code reviews and comment the code in case it makes no sense based on the training data from similar code or codebases. They will perform correcting fixes and push back the changes for PR. A human will only be needed as a second pair of eyes and to do the merge.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;transformation-2-declarative-programming-model&#34;&gt;Transformation 2: Declarative programming model&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#transformation-2-declarative-programming-model&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/tran-2.png&#34; alt=&#34;super goku&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of writing imperative code we will use a more declarative model for many parts of the system. It such case we will be writing code using a natural language style. We will declare our functional and non functional requirements and our technical requirements and the ML assistant will train models to produce code that abides to those constraints.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More and more blocks of functionality can be moved into this model. For example, http servers, CLI applications, UI applications have a lot of boilerplate. This can be used as a model for training ML assistants to produce code that matches a declaration file. Thus it will be easier to spin up applications without even touching the keyboard.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You will speak what your application does and it will just be written by itself for you&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;transformation-3-automatic-deployment-orchestration-configuration-disaster-recovery-and-testing&#34;&gt;Transformation 3: Automatic Deployment, Orchestration, Configuration, Disaster Recovery and Testing&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#transformation-3-automatic-deployment-orchestration-configuration-disaster-recovery-and-testing&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/tran-3.jpg&#34; alt=&#34;super saya&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Applications will be able to deploy themselves automatically, write test cases in case of an error automatically and push the test cases to the repositories. They will have smart self detection capabilities and join orchestration platforms. In case that the configuration needs to be adjusted the ML assistants can perform those corrections on the fly. In case of disaster they will perform self patching and self healing based on the desired state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In that case, humans will only play a really small part on this, by the moment you deploy the app. AI and ML assistants will have their own continuous delivery pipelines and they will perform intelligent and autonomous deployments and configuration management in the most efficient manner.&lt;/p&gt;
&lt;p&gt;In case of disaster, they will perform all necessary operations to restore service. Patch systems, offload traffic, rollback etc.&lt;/p&gt;
&lt;p&gt;In the future, everything will be deployed as &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_containers&#34;&gt;containers&lt;/a&gt; in a more &lt;a href=&#34;https://en.wikipedia.org/wiki/Decentralization&#34;&gt;decentralized&lt;/a&gt; cloud space. They will be private and public examples of course but it will be more ubiquitous and frictionless.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;transformation-4-entire-software-development-lifecycle-will-be-only-a-high-level-description&#34;&gt;Transformation 4: Entire Software Development Lifecycle will be only a High-Level Description&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#transformation-4-entire-software-development-lifecycle-will-be-only-a-high-level-description&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/tran-4.jpg&#34; alt=&#34;Over 9000&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From the initial concept to the end product together with the whole lifecycle: product launch running, maintenance product enhancements and product decommission will be declared and controlled in a single file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In that phase, humans will only be observers both in terms of development and in terms of permissions. They will only express ideas and the rest will be handled by the ML assistants. They will be able to test ideas in terms of factors they add in the project declaration file and possibly some constraints in terms of recourses available. The ML and AI assistants will be able to figure out the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thus the role of the developer will be mostly associated with improving the algorithm to produce the most cost efficient and profitable results.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The new era of programming will be focused on producing software models that are competing for each other in terms of intelligent solutions and implementations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything related to programming will be a smart solution that will enable humanity reduce risk to their everyday life to 99.99% while maximising happiness and longevity to 99.99%.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;The current traditional way of programming will be obsolete, as it will outperform any human made solutions.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everyone will have assistants powered by AI and ML software that will help us turn ideas to real world applications on the fly.&lt;/p&gt;
&lt;p&gt;That will boost entrepreneurship and innovation to the roof. People will be talking about best ways to train algorithmic models to take us to the nearest Earth-like planet or finding a solution to a sustainable environment that will make our lives happier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, there has to be some sort of control because humans also have the tendency to self-destroy and take advantage of each other. Maybe though we will have assistants that will prevent us from doing harm! Who knows!&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;verdict&#34;&gt;Verdict&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#verdict&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Are you ready for the future? It&amp;rsquo;s exciting!&lt;/p&gt;
&lt;p&gt;I reference some links to get started:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/josephmisiti/awesome-machine-learning&#34;&gt;Awesome Machine Learning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/owainlewis/awesome-artificial-intelligence&#34;&gt;Awesome Artificial Intelligence&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/machine-learning/&#34;&gt;Azure Machine Learning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.udacity.com/course/machine-learning-engineer-nanodegree--nd009&#34;&gt;Udacity Nanodegree&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;</description></item><item><title>What is BDD anyway?</title><link>https://theodesp.github.io/codethat/tutorial/what-is-bdd-anyway/</link><pubDate>Fri, 07 Jul 2017 14:15:59 -0600</pubDate><guid>https://theodesp.github.io/codethat/tutorial/what-is-bdd-anyway/</guid><description>&lt;p&gt;In the modern Software Development world, we have various stakeholders each with its own interest.
In general, we can divide the stakeholders into 2 groups.
The first group is the &lt;strong&gt;Internal stakeholders&lt;/strong&gt; which include business owners, managers, and employees.
Their main interest is to drive the company to success as they are directly involved in the running of the organization.&lt;/p&gt;
&lt;p&gt;The other group is the &lt;strong&gt;External stakeholders&lt;/strong&gt;. They are entities not within a business itself but who care about or
are affected by its performance (e.g., clients, investors, suppliers, etc).&lt;/p&gt;
&lt;p&gt;Now each individual group has its own vocabulary that they use in their everyday operations.
Often there is a confusion of what actually needs to be done in order to keep all the stakeholders happy with each other.&lt;/p&gt;
&lt;p&gt;For the business owners, the business needs being truly able to define the desired outcomes in terms of ROI.
The employees especially the developers need to have a deep understanding of what needs to be built in order to fulfill the business needs and the users need to use the features in order to satisfy their needs.&lt;/p&gt;
&lt;p&gt;In order to have a formal and verifiable way of checking that the business needs align with the actual application features,
the Software Engineers, QA analysts and Engineering/Product Managers work together and create &lt;strong&gt;User stories&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;user story&lt;/strong&gt; is a very high-level definition of a requirement, containing just enough information so that the
developers can produce a reasonable estimate of the effort to implement it and test it.*&lt;/p&gt;
&lt;p&gt;This article will focus on the &lt;strong&gt;testing&lt;/strong&gt; side of the user story. The purpose of testing is to ensure that the system
that is built is working as expected. The main drive of this is the mere reality that software bugs are all over the
place and due to the fact that fixing a bug that was not tested and found in production is almost
&lt;a href=&#34;http://blog.celerity.com/the-true-cost-of-a-software-bug&#34;&gt;10x more costly&lt;/a&gt; compared to when it was found and fixed in development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How we test software you say?&lt;/strong&gt; Well, there are various approaches to testing. Let&amp;rsquo;s describe some of them.&lt;/p&gt;
&lt;p&gt;There is the &lt;em&gt;test-last approach&lt;/em&gt; where you write code first and then you write tests to verify that.
You might have been writing code like that until now.&lt;/p&gt;
&lt;p&gt;There is the &lt;em&gt;test-first approach&lt;/em&gt; where you write tests first and then drive your code by making
the tests pass. One application of this is &lt;strong&gt;Test Driven Development or TDD&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Of course, some would write &lt;em&gt;no tests at all&lt;/em&gt; and rely only on QA testing.&lt;/p&gt;
&lt;p&gt;Out of those ways to test we are interested in TDD. The primary disadvantages of writing code driven by tests are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When to test?&lt;/li&gt;
&lt;li&gt;What to test?&lt;/li&gt;
&lt;li&gt;How to know if a specification is met?&lt;/li&gt;
&lt;li&gt;Does the code deliver business value?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/customer-wanted.jpg&#34; alt=&#34;what the customer wanter&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Overcoming those disadvantages is why &lt;strong&gt;BDD&lt;/strong&gt; was &lt;a href=&#34;https://dannorth.net/introducing-bdd/&#34;&gt;born&lt;/a&gt;.
But what exactly is BDD? Bear with me and we will find out by looking into some facts.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;what-are-the-facts&#34;&gt;What are the Facts&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#what-are-the-facts&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Behavior driven development has nothing to do with testing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/3-misconceptions-about-bdd&#34;&gt;Behavior-driven development, and it has nothing to do with testing&lt;/a&gt;.
Testing is something you can’t do until the software exists. We write tests to verify that our assumptions work as expected.
On the other hand, BDD is an approach or a different process to develop systems that are focused on delivering what the
business actually needs while adhering to user requirements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BDD helps communication within the team.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By providing a readable and understandable vocabulary BDD helps bridge the communication gap between clients,
developers and other stakeholders. A shared language ensures everyone (technical or not) has enough understanding of
the status of the project. This creates a collaborative environment that helps business and technical teams to create software with business value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BDD is easy to start with.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BDD utilizes a small DSL called &lt;a href=&#34;https://github.com/cucumber/cucumber/wiki/Gherkin&#34;&gt;Gherkin&lt;/a&gt; which is so easy and
readable that even the users can use it to add features or requests. You can even add them to
their &lt;a href=&#34;https://github.com/cucumber/cucumber/wiki/Spoken-languages&#34;&gt;own language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is an example of a &lt;em&gt;.feature&lt;/em&gt; file. We are using Cucumber in that case&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;Feature: Serve coffee
Coffee should not be served until paid for
Coffee should not be served until the button has been pressed
If there is no coffee left then money should be refunded
Scenario: Buy last coffee
Given there are 1 coffees left in the machine
And I have deposited 1$
When I press the coffee button
Then I should be served a coffee&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is another one with multiple input values to test:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;Scenario Outline: eating
Given there are &amp;lt;start&amp;gt; cucumbers
When I eat &amp;lt;eat&amp;gt; cucumbers
Then I should have &amp;lt;left&amp;gt; cucumbers
Examples:
| start | eat | left |
| 12 | 5 | 7 |
| 20 | 5 | 15 |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Instead of referring to “tests”, in BDD will use the terms “scenario” and “specification”.&lt;/p&gt;
&lt;p&gt;In general BDD specifications answer the following questions:
* Where to start in the process
* What to test and what not to test
* How much to test in one go
* What to call the tests
* How to understand why a test fails&lt;/p&gt;
&lt;p&gt;This type of DSL is very readable and portable and can be added as part of the development process in the user story tickets. That builds a documentation artifact that is accessible to all internal stakeholders which they can contribute.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;practice&#34;&gt;Practice&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#practice&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Ok, I have a really good practice for you. In this section, you are going to understand how to build a real-world application in Javascript using BDD with Cucumber.&lt;/p&gt;
&lt;p&gt;The project is similar to &lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftbranyen%2Fgithub-viewer&#34;&gt;this&lt;/a&gt; although you can use any framework you like. You are asked to build a simple GitHub viewer. Here is the main user story:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;As a User I would like to have a Web application that connects to GitHub
Rest API and displays users from organizations.
I need to be able to search for users and when I clicked on the user
results I need to be able retrieve their repositories.
Finally, I need to be able to click a repository so that
all the commits are displayed in order.
If the project has many commits I would like
the results to be paginated by 50 or 100 commits.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This could come from a friend or a customer so it’s important to analyze in detail what are the requirements of the application and what are the main features we need to develop.
So first things first you need to do those tasks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Read carefully the User story. Try to make note some keywords that map to actions. For example, &lt;strong&gt;connects&lt;/strong&gt; means accessing or requesting the GitHub API using HTTP.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Out of the actions, you noted down to write some simple scenarios for each one. For example:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;Scenario: Search for user that exists
Given I have visited the main page
And I have focused on the search input
When I enter a name of a user that exists
And I press enter
Then I should be able to retrieve the users repositories&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Try to think of edge cases or what can go wrong in your requests or responses. Write down those scenarios also.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a Project on GitHub and install the required libraries.
If you don’t want to w8 you can clone/fork &lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftheodesp%2Fbdd-javascript.git&#34;&gt;this repo here&lt;/a&gt;. Add the scenarios you’ve written down as tickets using the built-in &lt;a href=&#34;https://guides.github.com/features/issues/&#34;&gt;issue management&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each issue/task, you’ve raised write aÂ &lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fcucumber%2Fcucumber%2Fwiki%2FFeature-Introduction&#34;&gt;.feature file&lt;/a&gt; and put it into the features folder. Make sure the file has a relevant name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run your tests with Cucumber. They will all fail of course as you need to start implementing them!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each failing test implement the feature requirements.
If at any point you think you missed something you can add more scenarios then. Repeat until you finish all the scenarios.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While you are working on the tickets don’t forget to update the issue tracker.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Points&lt;/strong&gt;: A tool that can help you with running tests is a Continuous Integration Tool or CI.
What is a CI you say? That’s a topic for another article. I suggest you add &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis&lt;/a&gt; as its free and easy to use. The CI will run your tests after each commit and point you for errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FINISHED&lt;/strong&gt;: Congratulations. I hope you liked testing with BDD and understood a lot of it.
Don’t forget to showcase your app to the world, add it to your LinkedIn Projects and also mention your &lt;a href=&#34;https://theodespoudis.com/&#34;&gt;awesome mentor&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some links to help you for this task are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fdeveloper.github.com%2F&#34;&gt;GitHub Developers API&lt;/a&gt;: For interfacing with GitHub API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;Cucumber.js&lt;/a&gt;: BDD tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://waffle.io/&#34;&gt;Waffle Project Management&lt;/a&gt;: Project management tool Alternative to Git Issues.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mklabs/mocha-gherkin&#34;&gt;Mocha-Gherkin&lt;/a&gt;: If you want to use mocha and gherkin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;summing-up&#34;&gt;Summing up&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#summing-up&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;To sum up, the main idea behind BDD is that it’s driven to prevent communication gaps, that is having everyone in the team communicating more often, better and based on real world examples and not on abstract and imperative requirements. Thus we all end up with meaningful tests that are portable, easy to read and easy to verify.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#references&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/3-misconceptions-about-bdd&#34;&gt;3 misconceptions about bdd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inviqa.com/blog/bdd-guide&#34;&gt;bdd guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/behavior_driven_development/index.htm&#34;&gt;behavior driven development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Happy coding.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>‘this’-less Javascript Development</title><link>https://theodesp.github.io/codethat/tutorial/this-less-javascript-development/</link><pubDate>Fri, 30 Jun 2017 14:15:59 -0600</pubDate><guid>https://theodesp.github.io/codethat/tutorial/this-less-javascript-development/</guid><description>&lt;p&gt;The keyword this in JavaScript is probably the most discussed keyword in Javascript just because it
has a different behavior depending on where is called and what environment mode is enabled ( strict vs non-strict ).&lt;/p&gt;
&lt;div class=&#34;note js-note green &#34;&gt;
&lt;h4 class=&#34;note-title&#34;&gt;If you want to learn more about how the keyword ‘this’ works you can read those excellent articles&lt;/h4&gt;
&lt;p class=&#34;note-description&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://codeburst.io/javascript-the-keyword-this-for-beginners-fb5238d99f85&#34;&gt;Keyword This for beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3&#34;&gt;The Simple Rules to ‘this’ in Javascript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I won’t get into an intro how it works but instead, I will focus on a different idea and a method of programming.&lt;/p&gt;
&lt;p&gt;The way that this behaves has made some programmers angry so they decided not use it at all.
I don’t blame them as it has created so many side effects and language extensions in order not to deal with its
peculiarities (see arrow functions etc, this binding, etc) that at the end of the day we can do without it.
So now let&amp;rsquo;s try a new way of dealing with a &amp;lsquo;thisless&amp;rsquo; world by thinking deeply&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;separator&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;the-idea&#34;&gt;The idea&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#the-idea&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The main thing we need to remember is that functions are first-class citizens in Javascript.
You can use them as values to function parameters or you can return functions. When you do that you create a closure.
A &lt;strong&gt;closure&lt;/strong&gt; is an inner function that has access to the outer (enclosing) function’s variables scope chain.
Those variables are private to the function so they are not accessible to the scope that holds the inner function value by direct means.&lt;/p&gt;
&lt;p&gt;For example, take a look at this function &lt;code&gt;makeAdder&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeAdder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This function will accept a base parameter and it will return a function. That function will accept a parameter and when is called it will have access to the current variable so it will do the addition and return the result. For each subsequent calls, it will retain the current value each time.&lt;/p&gt;
&lt;p&gt;Thus the important thing to note is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Closures define their own local lexical environment that act as private space for the functions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Closures are a very powerful feature in Javascript and when used correctly one can build very good abstractions.&lt;/p&gt;
&lt;p&gt;Now that we have this knowledge we can extend the notion of returning a particular object that knows how to manipulate on the local environment. Think of it as a public API that the closure exposes. The name of it is the &lt;strong&gt;revealing module pattern&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can say that in the revealing module pattern you can define which members are publicly accessible and which members are private. That makes the code more readable and easier to use.&lt;/p&gt;
&lt;p&gt;Here is an example of it:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;privateCounter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;privateCounter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;decrement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;privateCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// logs 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see the privateCounter variable is our data we need to handle and the operations are the increment, decrement, and value&lt;/p&gt;
&lt;p&gt;Armed with that knowledge we have all the required tools to program without this and I will prove it with an example.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;the-example&#34;&gt;The example&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#the-example&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;To demonstrate one simple example on how to use closures and functions and no this, we are going to implement a simple data structure called a &lt;strong&gt;deque&lt;/strong&gt;. A deque or double-ended queue is an abstract data type that acts as a queue, for which elements can be added to or removed from either the front (head) or back (tail) It is also often called a head-tail linked list as we are going to implemented using a linked list. It may sound complicated but it&amp;rsquo;s not and if you follow along with the logic you will be able to understand how to implement all the required operations that a deque has to satisfy. Note that while this is an example you can apply similar techniques to any object that holds state whether its a Model object, a Store or whatever.&lt;/p&gt;
&lt;p&gt;Here are the required operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;create&lt;/strong&gt;: Creates a new deque object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isEmpty&lt;/strong&gt;: Checks if the deque object is empty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pushBack&lt;/strong&gt;: Appends a new item at the end of the deque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pushFront&lt;/strong&gt;: Appends a new item at the front of the deque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;popBack&lt;/strong&gt;: Removes and returns the last element of the deque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;popFront&lt;/strong&gt;: Removes and returns the first element of the deque.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s first think of how to represent our deque in terms of objects and closure variables. If we have a good representation of that we can implement the operations easily.&lt;/p&gt;
&lt;p&gt;We need a variable lets call it &lt;code&gt;data&lt;/code&gt; that will hold each item on the deque. We also need pointers for the first and last item on the deque. Let&amp;rsquo;s call them &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; respectively. As it’s a linked list implementation we need a way we can link each item with each other so for each item we need pointers for the next and previous items. Let&amp;rsquo;s call them &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;. Lastly, we need to keep track of how may items we have so let’s call it &lt;code&gt;length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we need to group the variables in their right place. For each node we need the data and the pointers to next and prev so let&amp;rsquo;s define the Node as:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For each Deque we need a head, a tail and a length so let&amp;rsquo;s define the Deque as:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Deque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, these objects represent a specification of a Node and a Deque. We need to keep them inside our closure:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Deque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// need to return the public api here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have established what our closure variables will be we can implement the &lt;code&gt;create&lt;/code&gt; method which is as simple as:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it. A newly constructed deque has no elements. Now for the &lt;code&gt;isEmptymethod&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We pass a deque object and we check that its length property is zero. Cool.&lt;/p&gt;
&lt;p&gt;Now for the pushFront method, we have to actually do the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new Node.&lt;/li&gt;
&lt;li&gt;If the deque is empty you just assign the head and tail to point the new Node.
Otherwise, if the deque is not empty grab the current head of the deque and make sure you assign prev to the new Node
and let the new Node point its next to the head. Thus the first item will be the new Node followed by the old head.
We need not forget to update the deque head to point to the new Node.&lt;/li&gt;
&lt;li&gt;Increment length.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Create a new Node
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Grab the current head
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// We have at least one item. Prepend new Node in the front
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The deque is empty. Just assign tail.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Update length
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Similarly, we do the same for the pushBack method for the last item of the deque.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Create a new Node
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Grab the current tail
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// We have at least one item. Append new Node at the back
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The deque is empty. Just assign head.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Update length
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lastly, we need to expose our public methods outside the closure so we return an object of the exported required methods:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;popFront&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;popFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;popBack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;popBack&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So far so good. So how do we use it? Let&amp;rsquo;s show usage example showing a simple representation of the structure:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./lib/deque&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [1]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;popFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// []
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [2]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [3]&amp;lt;=&amp;gt;[2]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [3]&amp;lt;=&amp;gt;[2]&amp;lt;=&amp;gt;[4]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice how we have a clear separation of data and operations against the data. As long as we hold a valid reference of a deque we can use the particular LinkedList operations with confidence.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;homework-time&#34;&gt;Homework time&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#homework-time&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Yes, you thought you are going away by not practicing anything on your own would ya? For a complete understanding of how things work and you get the feel of this type of development I suggest you work on the following exercises on your own. Just clone/fork my github repo &lt;a href=&#34;https://github.com/theodesp/thisless-deque&#34;&gt;here&lt;/a&gt; and start working on them. (Nope you won’t find any answers there hohoho.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Based on the previous operations implementations satisfy the rest. Implement the &lt;code&gt;popBack&lt;/code&gt; and &lt;code&gt;popFront&lt;/code&gt; functions that remove and return the first and the last item on the deque accordingly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This particular implementation of a deque uses linked lists. A different implementation uses plain Javascript array objects. Implement all the required operations of a deque using an array and call it &lt;code&gt;ArrayDeque&lt;/code&gt;. Remember no this, no new.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What differences in time and space complexity you can find for each method of the &lt;code&gt;ArrayDeque&lt;/code&gt; and &lt;code&gt;LinkedListDeque&lt;/code&gt;. Write down your thoughts in markdown.
Another way of implementing a deque is by using both an Array and a LinkedList. Call it &lt;code&gt;MixedDeque&lt;/code&gt; . In that case, you allocate a fixed size Array block lets say 64 items where you put your items. When you push too many items in the block that exceed the block size you allocate a new block which you use a linked list to link the blocks together in a FIFO fashion. Implement the required methods for the deque using this approach. What are the advantages and the disadvantages of this structure? Write down your thoughts in markdown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In his book about &lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&#34;&gt;Design Patterns in Javascript&lt;/a&gt; the Author Addy Osmany notes that one disadvantage of the revealing module pattern is that if a private function refers to a public function, that public function can’t be overridden if a patch is necessary as because the private function will continue to refer to the private implementation. Thus the pattern doesn’t apply to public members, only to functions. Devise a way to overcome this disadvantage. Think about what the dependencies are and how to inverse that control. How to make sure all the private functions access public functions in a way that we are always in control what&amp;rsquo;s get passed inside the closure thus not having to do worry about patches on the public functions? Write down your thoughts in markdown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a method called &lt;code&gt;join&lt;/code&gt; that glues together 2 deques. For instance calling &lt;code&gt;LinkedListDeque.join(first, second)&lt;/code&gt; will append the second deque at the end of the first and return the new deque.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop a non-destructive traversal mechanism for the deque so that it can be iterated in a for loop. For this example, you can use es6 iterators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop a non-destructive reverse traversal mechanism for the deque so that it can be iterated in a for loop in reverse order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join the movement and publish your code on Github bragging that you made a deque implementation with no this and how well you know deques inside out. Don’t forget to mention your &lt;a href=&#34;https://www.linkedin.com/in/theofanis-despoudis-7bb30913/&#34;&gt;awesome mentor&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Marks&lt;/strong&gt;: Use any kind of testing framework to add tests to all of your implementations. Don’t forget to test edge cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Marks&lt;/strong&gt;: Modify the deque implementation to allow handling of weighted nodes. For example, you when you pushBack an item you can specify a &lt;code&gt;weight&lt;/code&gt; or a priority &lt;code&gt;score&lt;/code&gt;. If you don’t specify a weight the behavior is the same as a normal deque. If you specify a weight you need to make sure that after each operation the last item in the list has the lowest priority and the first element on the list has the highest priority. Add tests to verify that invariant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Marks&lt;/strong&gt;: A &lt;strong&gt;polynomial&lt;/strong&gt; is an expression that can be written as: &lt;code&gt;an * x^n + an-1*x^n-1 + ... + a1x^1 + a0&lt;/code&gt; where &lt;code&gt;an..a0&lt;/code&gt; are coefficients and &lt;code&gt;n…1&lt;/code&gt; are exponents. Design a deque class that can represent a polynomial. Add methods for adding, subtracting, multiplying and dividing a polynomial. Assume that you pass only simplified polynomials don’t bother with complex ones. Add tests to verify the results are ok. Make sure that in all your methods you return the result as a new deque.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ultra Marks&lt;/strong&gt;: Pick a programming language other than Javascript (Python, Go, C++, etc.) and implement the all the previous exercises. Woohoo.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;conclusion&#34;&gt;Conclusion&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#conclusion&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Ok I hope you did your homework and you learned something from it. If you think that the benefits of not using this are worth you can also check out this eslint rules plugin where you can enforce it to your lint checks. Make sure you achieve consensus with your colleagues first though as you might get grumpy faces whenever they see you!&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;</description></item><item><title>How to be an awesome programmer</title><link>https://theodesp.github.io/codethat/article/how-to-be-an-awesome-programmer/</link><pubDate>Tue, 08 Aug 2017 14:15:59 -0600</pubDate><guid>https://theodesp.github.io/codethat/article/how-to-be-an-awesome-programmer/</guid><description>&lt;p&gt;You wake up one morning after having a revelation, you decide to do one good thing in your life,
instead of your usual rant. You think, OK I’ve been a jackass lately at work and I want to
start being nice to others. Maybe I was too harsh to the new recruits and I didn’t want to
make them cry on their first day. I want to make a difference today.&lt;/p&gt;
&lt;p&gt;Stop where you are.&lt;/p&gt;
&lt;p&gt;This is a guide to help you become &lt;strong&gt;the most awesome programmer&lt;/strong&gt; in the whole world.
It&amp;rsquo;s easy. You only have to pay attention as this is important.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;escape-from-the-cave&#34;&gt;Escape from the Cave&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#escape-from-the-cave&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/escape-cave.jpg&#34; alt=&#34;getOut&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hey if you are still programming like you are living in the cave, hiding stuff for yourself or idealising your abstractions and minimising other people effort, bragging your self out like you are the god-programmer with 100x productivity or whatever you want to call it, please stop it before you proceed further.&lt;/p&gt;
&lt;p&gt;Acting like that will not get you further. You will always be a caveman in others people eyes.&lt;/p&gt;
&lt;p&gt;Do something different instead. Showcase your code, share your opinions, don’t minimise other opinions different than your own and stop calling yourself productive for the first time.&lt;/p&gt;
&lt;p&gt;That will help you follow the next advice.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;be-a-role-model&#34;&gt;Be a role model&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#be-a-role-model&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You can be awesome. If you respect yourself as much as you respect your work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Of humility&lt;/strong&gt;. Being humble is not a bad thing. You will not only better liked, as you might imagine, but you will also more effective. This will help you maintain a self-control that will make the other people near you feel safer. They will value you more gracefully and will more likely be less prejudiced of your actions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Of your work ethics&lt;/strong&gt;. It&amp;rsquo;s important to maintain your integrity and when asked to always give constructive and honest feedback. You need to act with a responsibility for your actions. Don’t hide staff under the carpet not thinking that other people near you will not notice. Have some chip on your shoulder. Do not let the quality bar fall for any reason. Be consistent on your commitments and keep an eye on other people to motivate them as you go along. This will help you establish a zone of awesomeness when people are around you.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you have mastered that you are ready for the next advice.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;be-an-effective-team-member&#34;&gt;Be an effective Team Member&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#be-an-effective-team-member&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers become more effective and efficient at creating software by improving their ability to understand, communicate with, and collaborate with other people.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By building trust&lt;/strong&gt;. If people trust you they will help you. If not they will ignore you. Trust is not assumed. It’s gained. So in order to gain or build trust, you need to trust other people. That may be the most difficult part for some people.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By showing respect&lt;/strong&gt;. You are not alone. Before you enter work, drop your ego to the floor. You will be giving criticism as well as receiving criticism a lot, so you better learn how to accept it. Even if they come from the newest team members, with less experience from you. You have to show respect and listen. Practice on your wordings. Instead of saying “hey this is stupid or “this is crap start talking about “confusing factors or “it&amp;rsquo;s not obvious that way, maybe if you can do it differently”. Discuss not attack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By living in the ground, not in the sky&lt;/strong&gt;. No-one likes a smart ass. Be humble and not provoke your fellow teammates with pointless arguments. Remember, you are human and not Superman. Instead, build on your social skills. Have fun by being a genuine person.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software Development is a Team Effort. No single piece of successful software was build by one person.&lt;/p&gt;
&lt;p&gt;Drop your ego to the floor and start taking responsibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you follow the next advice you will achieve godly status.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;be-a-leader&#34;&gt;Be a leader&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#be-a-leader&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You don’t learn much if you work alone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Of team Culture&lt;/strong&gt;. Value code reviews, test-driven development, good design docs, team social events. Maintain an ethos or a principles list that all should respect and defend. Otherwise, it will be a chaotic mess and the one shouting the most will prevail. It will be a mad max world with lots of aggression, ad-hocism and randomness.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Of performance&lt;/strong&gt;. Promote consensus driven development. This may mean you may drive some processes from start to finish, or you just give it a gentle push in the right direction to speed it up. Grab people out of their desks if you think the process is driving to a halt. By grabbing of course I mean being on top of any problems. Make sure you grab the right people at the right time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Working alone is inherently riskier than working with others
Focus on the people as much as you focus on the code.
A 10x programmer with a -10x peoples skills is an impediment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No amount of smarts or knowledge can substitute good team-working spirit.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;verdict&#34;&gt;Verdict&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#verdict&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Building a healthy software development culture is more like an art than a trait as it depends solely on genuine interactions between teams. Not having those is like binding wood and steel together with glue. No matter how well you apply the glue, it will eventually break…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Skilled leaders serve their teams, not the opposite.&lt;/strong&gt;
Other wise it would be too easy to take advantage of the situation and to fulfil their own agendas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shipping great software requires shaping great relationships first.&lt;/strong&gt;
That applies to any shippable goods that involve collaboration, not only software or services.&lt;/p&gt;
&lt;p&gt;I hope you take that on board on your next social interaction. Until then I wish you fare well.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;</description></item><item><title>About CodeThat.today</title><link>https://theodesp.github.io/codethat/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theodesp.github.io/codethat/about/</guid><description>
&lt;figure class=&#34;text-center&#34;&gt;
&lt;img src=&#34;https://theodesp.github.io/codethat/img/logos/logo-.svg&#34; width=&#34;300&#34;/&gt;
&lt;/figure&gt;
&lt;p&gt;CodeThat.today is a site for all developers wanting to learn new technologies and best practices. We write practical guides, in-depth tutorials and step-by-step articles. We also give expert opinions and recommendations about the best uses of a particular technology so that the reader can make informed decisions.&lt;/p&gt;
&lt;p&gt;I hope you&amp;rsquo;ll enjoy the site as much as we do!
Let&amp;rsquo;s keep in touch &lt;a href=&#34;http://twitter.com/nerdokto&#34;&gt;via Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-author&#34;&gt;The author&lt;/h2&gt;
&lt;figure class=&#34;text-center&#34;&gt;
&lt;img src=&#34;https://theodesp.github.io/codethat/img/me.jpg&#34; width=&#34;300&#34;/&gt;
&lt;/figure&gt;
&lt;p&gt;Hello there. My name is Theo and I&amp;rsquo;m the person behind this website. I&amp;rsquo;m a Senior Developer by trade and in love of Web Technologies.
Writing code and solving problems was always my passion. I created this site, so I can share my experiences with the fellow readers and
also to learn new things myself!&lt;/p&gt;
&lt;p&gt;In addition to my engineering work, I like to help other people learn how to code. I&amp;rsquo;m currently a mentor with &lt;a href=&#34;https://codeinstitute.net/&#34;&gt;CodeInstitute&lt;/a&gt; and &lt;a href=&#34;https://www.codementor.io/theofanisdespoudis&#34;&gt;CodeMentor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to get in touch via &lt;a href=&#34;http://twitter.com/nerdokto&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;https://dev.to/theodesp&#34;&gt;Dev.to&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Contact</title><link>https://theodesp.github.io/codethat/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theodesp.github.io/codethat/contact/</guid><description/></item><item><title>Support us by buying our Books and Video Courses</title><link>https://theodesp.github.io/codethat/books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theodesp.github.io/codethat/books/</guid><description/></item></channel></rss>