<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Top Quality Developer Tutorials CodeThat.today</title><link>https://codethat.onrender.com/tags/javascript/</link><description>Recent content in javascript on Top Quality Developer Tutorials CodeThat.today</description><language>en-us</language><lastBuildDate>Sun, 30 Jul 2017 14:15:59 -0600</lastBuildDate><atom:link href="https://codethat.onrender.com/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Series-2</title><link>https://codethat.onrender.com/tutorial/awesome-programming/series-2/</link><pubDate>Sun, 30 Jul 2017 14:15:59 -0600</pubDate><guid>https://codethat.onrender.com/tutorial/awesome-programming/series-2/</guid><description/></item><item><title>Series-1</title><link>https://codethat.onrender.com/tutorial/awesome-programming/series-1/</link><pubDate>Fri, 30 Jun 2017 14:15:59 -0600</pubDate><guid>https://codethat.onrender.com/tutorial/awesome-programming/series-1/</guid><description/></item><item><title>What is BDD anyway?</title><link>https://codethat.onrender.com/tutorial/what-is-bdd-anyway/</link><pubDate>Fri, 07 Jul 2017 14:15:59 -0600</pubDate><guid>https://codethat.onrender.com/tutorial/what-is-bdd-anyway/</guid><description>&lt;p&gt;In the modern Software Development world, we have various stakeholders each with its own interest.
In general, we can divide the stakeholders into 2 groups.
The first group is the &lt;strong&gt;Internal stakeholders&lt;/strong&gt; which include business owners, managers, and employees.
Their main interest is to drive the company to success as they are directly involved in the running of the organization.&lt;/p&gt;
&lt;p&gt;The other group is the &lt;strong&gt;External stakeholders&lt;/strong&gt;. They are entities not within a business itself but who care about or
are affected by its performance (e.g., clients, investors, suppliers, etc).&lt;/p&gt;
&lt;p&gt;Now each individual group has its own vocabulary that they use in their everyday operations.
Often there is a confusion of what actually needs to be done in order to keep all the stakeholders happy with each other.&lt;/p&gt;
&lt;p&gt;For the business owners, the business needs being truly able to define the desired outcomes in terms of ROI.
The employees especially the developers need to have a deep understanding of what needs to be built in order to fulfill the business needs and the users need to use the features in order to satisfy their needs.&lt;/p&gt;
&lt;p&gt;In order to have a formal and verifiable way of checking that the business needs align with the actual application features,
the Software Engineers, QA analysts and Engineering/Product Managers work together and create &lt;strong&gt;User stories&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;user story&lt;/strong&gt; is a very high-level definition of a requirement, containing just enough information so that the
developers can produce a reasonable estimate of the effort to implement it and test it.*&lt;/p&gt;
&lt;p&gt;This article will focus on the &lt;strong&gt;testing&lt;/strong&gt; side of the user story. The purpose of testing is to ensure that the system
that is built is working as expected. The main drive of this is the mere reality that software bugs are all over the
place and due to the fact that fixing a bug that was not tested and found in production is almost
&lt;a href=&#34;http://blog.celerity.com/the-true-cost-of-a-software-bug&#34;&gt;10x more costly&lt;/a&gt; compared to when it was found and fixed in development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How we test software you say?&lt;/strong&gt; Well, there are various approaches to testing. Let&amp;rsquo;s describe some of them.&lt;/p&gt;
&lt;p&gt;There is the &lt;em&gt;test-last approach&lt;/em&gt; where you write code first and then you write tests to verify that.
You might have been writing code like that until now.&lt;/p&gt;
&lt;p&gt;There is the &lt;em&gt;test-first approach&lt;/em&gt; where you write tests first and then drive your code by making
the tests pass. One application of this is &lt;strong&gt;Test Driven Development or TDD&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Of course, some would write &lt;em&gt;no tests at all&lt;/em&gt; and rely only on QA testing.&lt;/p&gt;
&lt;p&gt;Out of those ways to test we are interested in TDD. The primary disadvantages of writing code driven by tests are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When to test?&lt;/li&gt;
&lt;li&gt;What to test?&lt;/li&gt;
&lt;li&gt;How to know if a specification is met?&lt;/li&gt;
&lt;li&gt;Does the code deliver business value?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/customer-wanted.jpg&#34; alt=&#34;what the customer wanter&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Overcoming those disadvantages is why &lt;strong&gt;BDD&lt;/strong&gt; was &lt;a href=&#34;https://dannorth.net/introducing-bdd/&#34;&gt;born&lt;/a&gt;.
But what exactly is BDD? Bear with me and we will find out by looking into some facts.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;what-are-the-facts&#34;&gt;What are the Facts&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#what-are-the-facts&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Behavior driven development has nothing to do with testing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/3-misconceptions-about-bdd&#34;&gt;Behavior-driven development, and it has nothing to do with testing&lt;/a&gt;.
Testing is something you can’t do until the software exists. We write tests to verify that our assumptions work as expected.
On the other hand, BDD is an approach or a different process to develop systems that are focused on delivering what the
business actually needs while adhering to user requirements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BDD helps communication within the team.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By providing a readable and understandable vocabulary BDD helps bridge the communication gap between clients,
developers and other stakeholders. A shared language ensures everyone (technical or not) has enough understanding of
the status of the project. This creates a collaborative environment that helps business and technical teams to create software with business value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BDD is easy to start with.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BDD utilizes a small DSL called &lt;a href=&#34;https://github.com/cucumber/cucumber/wiki/Gherkin&#34;&gt;Gherkin&lt;/a&gt; which is so easy and
readable that even the users can use it to add features or requests. You can even add them to
their &lt;a href=&#34;https://github.com/cucumber/cucumber/wiki/Spoken-languages&#34;&gt;own language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is an example of a &lt;em&gt;.feature&lt;/em&gt; file. We are using Cucumber in that case&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;Feature: Serve coffee
Coffee should not be served until paid for
Coffee should not be served until the button has been pressed
If there is no coffee left then money should be refunded
Scenario: Buy last coffee
Given there are 1 coffees left in the machine
And I have deposited 1$
When I press the coffee button
Then I should be served a coffee&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is another one with multiple input values to test:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;Scenario Outline: eating
Given there are &amp;lt;start&amp;gt; cucumbers
When I eat &amp;lt;eat&amp;gt; cucumbers
Then I should have &amp;lt;left&amp;gt; cucumbers
Examples:
| start | eat | left |
| 12 | 5 | 7 |
| 20 | 5 | 15 |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Instead of referring to “tests”, in BDD will use the terms “scenario” and “specification”.&lt;/p&gt;
&lt;p&gt;In general BDD specifications answer the following questions:
* Where to start in the process
* What to test and what not to test
* How much to test in one go
* What to call the tests
* How to understand why a test fails&lt;/p&gt;
&lt;p&gt;This type of DSL is very readable and portable and can be added as part of the development process in the user story tickets. That builds a documentation artifact that is accessible to all internal stakeholders which they can contribute.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;practice&#34;&gt;Practice&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#practice&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Ok, I have a really good practice for you. In this section, you are going to understand how to build a real-world application in Javascript using BDD with Cucumber.&lt;/p&gt;
&lt;p&gt;The project is similar to &lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftbranyen%2Fgithub-viewer&#34;&gt;this&lt;/a&gt; although you can use any framework you like. You are asked to build a simple GitHub viewer. Here is the main user story:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;As a User I would like to have a Web application that connects to GitHub
Rest API and displays users from organizations.
I need to be able to search for users and when I clicked on the user
results I need to be able retrieve their repositories.
Finally, I need to be able to click a repository so that
all the commits are displayed in order.
If the project has many commits I would like
the results to be paginated by 50 or 100 commits.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This could come from a friend or a customer so it’s important to analyze in detail what are the requirements of the application and what are the main features we need to develop.
So first things first you need to do those tasks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Read carefully the User story. Try to make note some keywords that map to actions. For example, &lt;strong&gt;connects&lt;/strong&gt; means accessing or requesting the GitHub API using HTTP.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Out of the actions, you noted down to write some simple scenarios for each one. For example:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;cucumber&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;Scenario: Search for user that exists
Given I have visited the main page
And I have focused on the search input
When I enter a name of a user that exists
And I press enter
Then I should be able to retrieve the users repositories&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Try to think of edge cases or what can go wrong in your requests or responses. Write down those scenarios also.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a Project on GitHub and install the required libraries.
If you don’t want to w8 you can clone/fork &lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftheodesp%2Fbdd-javascript.git&#34;&gt;this repo here&lt;/a&gt;. Add the scenarios you’ve written down as tickets using the built-in &lt;a href=&#34;https://guides.github.com/features/issues/&#34;&gt;issue management&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each issue/task, you’ve raised write aÂ &lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fcucumber%2Fcucumber%2Fwiki%2FFeature-Introduction&#34;&gt;.feature file&lt;/a&gt; and put it into the features folder. Make sure the file has a relevant name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run your tests with Cucumber. They will all fail of course as you need to start implementing them!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each failing test implement the feature requirements.
If at any point you think you missed something you can add more scenarios then. Repeat until you finish all the scenarios.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While you are working on the tickets don’t forget to update the issue tracker.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Points&lt;/strong&gt;: A tool that can help you with running tests is a Continuous Integration Tool or CI.
What is a CI you say? That’s a topic for another article. I suggest you add &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis&lt;/a&gt; as its free and easy to use. The CI will run your tests after each commit and point you for errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FINISHED&lt;/strong&gt;: Congratulations. I hope you liked testing with BDD and understood a lot of it.
Don’t forget to showcase your app to the world, add it to your LinkedIn Projects and also mention your &lt;a href=&#34;https://theodespoudis.com/&#34;&gt;awesome mentor&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some links to help you for this task are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/r/?url=https%3A%2F%2Fdeveloper.github.com%2F&#34;&gt;GitHub Developers API&lt;/a&gt;: For interfacing with GitHub API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;Cucumber.js&lt;/a&gt;: BDD tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://waffle.io/&#34;&gt;Waffle Project Management&lt;/a&gt;: Project management tool Alternative to Git Issues.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mklabs/mocha-gherkin&#34;&gt;Mocha-Gherkin&lt;/a&gt;: If you want to use mocha and gherkin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;summing-up&#34;&gt;Summing up&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#summing-up&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;To sum up, the main idea behind BDD is that it’s driven to prevent communication gaps, that is having everyone in the team communicating more often, better and based on real world examples and not on abstract and imperative requirements. Thus we all end up with meaningful tests that are portable, easy to read and easy to verify.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#references&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/3-misconceptions-about-bdd&#34;&gt;3 misconceptions about bdd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inviqa.com/blog/bdd-guide&#34;&gt;bdd guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/behavior_driven_development/index.htm&#34;&gt;behavior driven development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Happy coding.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>‘this’-less Javascript Development</title><link>https://codethat.onrender.com/tutorial/this-less-javascript-development/</link><pubDate>Fri, 30 Jun 2017 14:15:59 -0600</pubDate><guid>https://codethat.onrender.com/tutorial/this-less-javascript-development/</guid><description>&lt;p&gt;The keyword this in JavaScript is probably the most discussed keyword in Javascript just because it
has a different behavior depending on where is called and what environment mode is enabled ( strict vs non-strict ).&lt;/p&gt;
&lt;div class=&#34;note js-note green &#34;&gt;
&lt;h4 class=&#34;note-title&#34;&gt;If you want to learn more about how the keyword ‘this’ works you can read those excellent articles&lt;/h4&gt;
&lt;p class=&#34;note-description&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://codeburst.io/javascript-the-keyword-this-for-beginners-fb5238d99f85&#34;&gt;Keyword This for beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3&#34;&gt;The Simple Rules to ‘this’ in Javascript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I won’t get into an intro how it works but instead, I will focus on a different idea and a method of programming.&lt;/p&gt;
&lt;p&gt;The way that this behaves has made some programmers angry so they decided not use it at all.
I don’t blame them as it has created so many side effects and language extensions in order not to deal with its
peculiarities (see arrow functions etc, this binding, etc) that at the end of the day we can do without it.
So now let&amp;rsquo;s try a new way of dealing with a &amp;lsquo;thisless&amp;rsquo; world by thinking deeply&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;separator&#34;&gt;&lt;/div&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;the-idea&#34;&gt;The idea&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#the-idea&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The main thing we need to remember is that functions are first-class citizens in Javascript.
You can use them as values to function parameters or you can return functions. When you do that you create a closure.
A &lt;strong&gt;closure&lt;/strong&gt; is an inner function that has access to the outer (enclosing) function’s variables scope chain.
Those variables are private to the function so they are not accessible to the scope that holds the inner function value by direct means.&lt;/p&gt;
&lt;p&gt;For example, take a look at this function &lt;code&gt;makeAdder&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeAdder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This function will accept a base parameter and it will return a function. That function will accept a parameter and when is called it will have access to the current variable so it will do the addition and return the result. For each subsequent calls, it will retain the current value each time.&lt;/p&gt;
&lt;p&gt;Thus the important thing to note is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Closures define their own local lexical environment that act as private space for the functions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Closures are a very powerful feature in Javascript and when used correctly one can build very good abstractions.&lt;/p&gt;
&lt;p&gt;Now that we have this knowledge we can extend the notion of returning a particular object that knows how to manipulate on the local environment. Think of it as a public API that the closure exposes. The name of it is the &lt;strong&gt;revealing module pattern&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can say that in the revealing module pattern you can define which members are publicly accessible and which members are private. That makes the code more readable and easier to use.&lt;/p&gt;
&lt;p&gt;Here is an example of it:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;privateCounter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;privateCounter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;decrement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;privateCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// logs 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see the privateCounter variable is our data we need to handle and the operations are the increment, decrement, and value&lt;/p&gt;
&lt;p&gt;Armed with that knowledge we have all the required tools to program without this and I will prove it with an example.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;the-example&#34;&gt;The example&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#the-example&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;To demonstrate one simple example on how to use closures and functions and no this, we are going to implement a simple data structure called a &lt;strong&gt;deque&lt;/strong&gt;. A deque or double-ended queue is an abstract data type that acts as a queue, for which elements can be added to or removed from either the front (head) or back (tail) It is also often called a head-tail linked list as we are going to implemented using a linked list. It may sound complicated but it&amp;rsquo;s not and if you follow along with the logic you will be able to understand how to implement all the required operations that a deque has to satisfy. Note that while this is an example you can apply similar techniques to any object that holds state whether its a Model object, a Store or whatever.&lt;/p&gt;
&lt;p&gt;Here are the required operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;create&lt;/strong&gt;: Creates a new deque object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isEmpty&lt;/strong&gt;: Checks if the deque object is empty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pushBack&lt;/strong&gt;: Appends a new item at the end of the deque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pushFront&lt;/strong&gt;: Appends a new item at the front of the deque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;popBack&lt;/strong&gt;: Removes and returns the last element of the deque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;popFront&lt;/strong&gt;: Removes and returns the first element of the deque.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s first think of how to represent our deque in terms of objects and closure variables. If we have a good representation of that we can implement the operations easily.&lt;/p&gt;
&lt;p&gt;We need a variable lets call it &lt;code&gt;data&lt;/code&gt; that will hold each item on the deque. We also need pointers for the first and last item on the deque. Let&amp;rsquo;s call them &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; respectively. As it’s a linked list implementation we need a way we can link each item with each other so for each item we need pointers for the next and previous items. Let&amp;rsquo;s call them &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;. Lastly, we need to keep track of how may items we have so let’s call it &lt;code&gt;length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we need to group the variables in their right place. For each node we need the data and the pointers to next and prev so let&amp;rsquo;s define the Node as:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For each Deque we need a head, a tail and a length so let&amp;rsquo;s define the Deque as:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Deque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, these objects represent a specification of a Node and a Deque. We need to keep them inside our closure:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Deque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// need to return the public api here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have established what our closure variables will be we can implement the &lt;code&gt;create&lt;/code&gt; method which is as simple as:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it. A newly constructed deque has no elements. Now for the &lt;code&gt;isEmptymethod&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We pass a deque object and we check that its length property is zero. Cool.&lt;/p&gt;
&lt;p&gt;Now for the pushFront method, we have to actually do the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new Node.&lt;/li&gt;
&lt;li&gt;If the deque is empty you just assign the head and tail to point the new Node.
Otherwise, if the deque is not empty grab the current head of the deque and make sure you assign prev to the new Node
and let the new Node point its next to the head. Thus the first item will be the new Node followed by the old head.
We need not forget to update the deque head to point to the new Node.&lt;/li&gt;
&lt;li&gt;Increment length.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Create a new Node
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Grab the current head
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// We have at least one item. Prepend new Node in the front
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldHead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The deque is empty. Just assign tail.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Update length
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Similarly, we do the same for the pushBack method for the last item of the deque.&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Create a new Node
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Grab the current tail
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// We have at least one item. Append new Node at the back
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldTail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The deque is empty. Just assign head.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Update length
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lastly, we need to expose our public methods outside the closure so we return an object of the exported required methods:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;popFront&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;popFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;popBack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;popBack&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So far so good. So how do we use it? Let&amp;rsquo;s show usage example showing a simple representation of the structure:&lt;/p&gt;
&lt;div class=&#34;code-highlight code-highlight-with-label&#34; data-label=&#34;javascript&#34;&gt;&lt;span class=&#34;js-copy-to-clipboard copy-code&#34;&gt;copy&lt;/span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./lib/deque&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [1]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;popFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// []
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [2]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushFront&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [3]&amp;lt;=&amp;gt;[2]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pushBack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [3]&amp;lt;=&amp;gt;[2]&amp;lt;=&amp;gt;[4]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LinkedListDeque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice how we have a clear separation of data and operations against the data. As long as we hold a valid reference of a deque we can use the particular LinkedList operations with confidence.&lt;/p&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;homework-time&#34;&gt;Homework time&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#homework-time&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Yes, you thought you are going away by not practicing anything on your own would ya? For a complete understanding of how things work and you get the feel of this type of development I suggest you work on the following exercises on your own. Just clone/fork my github repo &lt;a href=&#34;https://github.com/theodesp/thisless-deque&#34;&gt;here&lt;/a&gt; and start working on them. (Nope you won’t find any answers there hohoho.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Based on the previous operations implementations satisfy the rest. Implement the &lt;code&gt;popBack&lt;/code&gt; and &lt;code&gt;popFront&lt;/code&gt; functions that remove and return the first and the last item on the deque accordingly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This particular implementation of a deque uses linked lists. A different implementation uses plain Javascript array objects. Implement all the required operations of a deque using an array and call it &lt;code&gt;ArrayDeque&lt;/code&gt;. Remember no this, no new.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What differences in time and space complexity you can find for each method of the &lt;code&gt;ArrayDeque&lt;/code&gt; and &lt;code&gt;LinkedListDeque&lt;/code&gt;. Write down your thoughts in markdown.
Another way of implementing a deque is by using both an Array and a LinkedList. Call it &lt;code&gt;MixedDeque&lt;/code&gt; . In that case, you allocate a fixed size Array block lets say 64 items where you put your items. When you push too many items in the block that exceed the block size you allocate a new block which you use a linked list to link the blocks together in a FIFO fashion. Implement the required methods for the deque using this approach. What are the advantages and the disadvantages of this structure? Write down your thoughts in markdown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In his book about &lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&#34;&gt;Design Patterns in Javascript&lt;/a&gt; the Author Addy Osmany notes that one disadvantage of the revealing module pattern is that if a private function refers to a public function, that public function can’t be overridden if a patch is necessary as because the private function will continue to refer to the private implementation. Thus the pattern doesn’t apply to public members, only to functions. Devise a way to overcome this disadvantage. Think about what the dependencies are and how to inverse that control. How to make sure all the private functions access public functions in a way that we are always in control what&amp;rsquo;s get passed inside the closure thus not having to do worry about patches on the public functions? Write down your thoughts in markdown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a method called &lt;code&gt;join&lt;/code&gt; that glues together 2 deques. For instance calling &lt;code&gt;LinkedListDeque.join(first, second)&lt;/code&gt; will append the second deque at the end of the first and return the new deque.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop a non-destructive traversal mechanism for the deque so that it can be iterated in a for loop. For this example, you can use es6 iterators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop a non-destructive reverse traversal mechanism for the deque so that it can be iterated in a for loop in reverse order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join the movement and publish your code on Github bragging that you made a deque implementation with no this and how well you know deques inside out. Don’t forget to mention your &lt;a href=&#34;https://www.linkedin.com/in/theofanis-despoudis-7bb30913/&#34;&gt;awesome mentor&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Marks&lt;/strong&gt;: Use any kind of testing framework to add tests to all of your implementations. Don’t forget to test edge cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Marks&lt;/strong&gt;: Modify the deque implementation to allow handling of weighted nodes. For example, you when you pushBack an item you can specify a &lt;code&gt;weight&lt;/code&gt; or a priority &lt;code&gt;score&lt;/code&gt;. If you don’t specify a weight the behavior is the same as a normal deque. If you specify a weight you need to make sure that after each operation the last item in the list has the lowest priority and the first element on the list has the highest priority. Add tests to verify that invariant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra Marks&lt;/strong&gt;: A &lt;strong&gt;polynomial&lt;/strong&gt; is an expression that can be written as: &lt;code&gt;an * x^n + an-1*x^n-1 + ... + a1x^1 + a0&lt;/code&gt; where &lt;code&gt;an..a0&lt;/code&gt; are coefficients and &lt;code&gt;n…1&lt;/code&gt; are exponents. Design a deque class that can represent a polynomial. Add methods for adding, subtracting, multiplying and dividing a polynomial. Assume that you pass only simplified polynomials don’t bother with complex ones. Add tests to verify the results are ok. Make sure that in all your methods you return the result as a new deque.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ultra Marks&lt;/strong&gt;: Pick a programming language other than Javascript (Python, Go, C++, etc.) and implement the all the previous exercises. Woohoo.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class=&#34;category-title&#34; id=&#34;conclusion&#34;&gt;Conclusion&lt;a class=&#34;fragment-identifier js-fragment-identifier fragment-identifier-scroll&#34; href=&#34;#conclusion&#34;&gt;&lt;i class=&#34;fa fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Ok I hope you did your homework and you learned something from it. If you think that the benefits of not using this are worth you can also check out this eslint rules plugin where you can enforce it to your lint checks. Make sure you achieve consensus with your colleagues first though as you might get grumpy faces whenever they see you!&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;</description></item></channel></rss>